// ignore: deprecated_member_use
// ignore: avoid_web_libraries_in_flutter
import 'dart:html' as html;
import 'dart:convert';
import 'dart:io';
import 'package:app_02/Widgets/snackbar.dart';
import 'package:app_02/home_page/my_home_screen.dart';
import 'package:app_02/Widgets/my_button.dart';
import 'package:app_02/email/email_signup_screen.dart';
import 'package:app_02/email/email_forgot_password_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:crypto/crypto.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:app_02/service/email_auth_service.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:uuid/uuid.dart';

class EmailLoginScreen extends StatefulWidget {
  const EmailLoginScreen({super.key});

  @override
  State<EmailLoginScreen> createState() => _EmailLoginScreenState();
}

class _EmailLoginScreenState extends State<EmailLoginScreen> {
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  bool isLoading = false; //v√≤ng tr√≤n quay loading
  bool isPasswordHidden = true;
  final _formKey = GlobalKey<FormState>();
  final AuthService _authService = AuthService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// L·∫•y ID thi·∫øt b·ªã v√† c√≥ m√£ h√≥a (Android/iOS/Web)
   String? deviceId;

  /// ‚úÖ H√†m l·∫•y DeviceId duy nh·∫•t (Web + Android + iOS + Desktop)
  ///   - T·ª± ƒë·ªông l∆∞u cache v√†o SharedPreferences ƒë·ªÉ t√°i s·ª≠ d·ª•ng.
  ///   - D√πng SHA-1 ƒë·ªÉ r√∫t g·ªçn v√† ·∫©n th√¥ng tin thi·∫øt b·ªã.
  ///   - Cho k·∫øt qu·∫£ ·ªïn ƒë·ªãnh tr√™n c√πng thi·∫øt b·ªã (k·ªÉ c·∫£ Web ƒëa tr√¨nh duy·ªát).
  static Future<String> getHashedDeviceId() async {
    final prefs = await SharedPreferences.getInstance();

    // üîπ N·∫øu c√≥ ID ƒë√£ l∆∞u ‚Üí tr·∫£ v·ªÅ lu√¥n
    final cachedId = prefs.getString('cached_device_id');
    if (cachedId != null && cachedId.isNotEmpty) {
      return cachedId;
    }

    String rawId = "unknown_device";
    final deviceInfo = DeviceInfoPlugin();
    try {
      if (kIsWeb) {

        final webInfo = await deviceInfo.webBrowserInfo;
        // üß© T·∫°o fingerprint ·ªïn ƒë·ªãnh gi·ªØa c√°c tr√¨nh duy·ªát tr√™n c√πng thi·∫øt b·ªã
        final width = html.window.screen?.width ?? 0; //L·∫•y ƒë·ªô ph√¢n gi·∫£i m√†n h√¨nh (theo pixel) c·ªßa thi·∫øt b·ªã
        final height = html.window.screen?.height ?? 0; //L·∫•y ƒë·ªô ph√¢n gi·∫£i m√†n h√¨nh (theo pixel) c·ªßa thi·∫øt b·ªã
        final pixelRatio = html.window.devicePixelRatio; //L·∫•y t·ª∑ l·ªá m·∫≠t ƒë·ªô ƒëi·ªÉm ·∫£nh (device pixel ratio)
        //Gh√©p l·∫°i t·∫°p th√†nh ID ri√™ng
        rawId = "web_${webInfo.platform ?? 'web'}_${webInfo.hardwareConcurrency ?? 0}_${webInfo.maxTouchPoints ?? 0}_${width}x${height}_${pixelRatio.toStringAsFixed(1)}";
      } else if (Platform.isAndroid) {
        final androidInfo = await deviceInfo.androidInfo;
        rawId = "${androidInfo.id}_${androidInfo.model}_${androidInfo.device}_${androidInfo.manufacturer}_${androidInfo.serialNumber ?? ''}";
         } else if (Platform.isIOS) {
        final iosInfo = await deviceInfo.iosInfo;
        rawId = "${iosInfo.identifierForVendor}_${iosInfo.model}_${iosInfo.systemName}";
      } else if (Platform.isWindows) {
        final winInfo = await deviceInfo.windowsInfo;
        rawId =
        "${winInfo.deviceId}|${winInfo.computerName}|${winInfo.numberOfCores}";
      } else if (Platform.isMacOS) {
        final macInfo = await deviceInfo.macOsInfo;
        rawId =
        "${macInfo.systemGUID ?? 'mac_unknown'}|${macInfo.computerName}|${macInfo.arch}";
      } else if (Platform.isLinux) {
        final linuxInfo = await deviceInfo.linuxInfo;
        rawId =
        "${linuxInfo.machineId ?? 'linux_unknown'}|${linuxInfo.name}|${linuxInfo.version}";
      }
    } catch (e) {
      rawId = "error_${e.toString()}";
    }

    // üîê Hash SHA-1 ‚Üí an to√†n & ng·∫Øn g·ªçn
    final bytes = utf8.encode(rawId);
    final digest = sha1.convert(bytes);
    final hashedId = digest.toString();

    // üíæ L∆∞u l·∫°i v√†o local cache ƒë·ªÉ t√°i s·ª≠ d·ª•ng l·∫ßn sau
    await prefs.setString('cached_device_id', hashedId);
    return hashedId;
  }

  /// üîÑ X√≥a ID thi·∫øt b·ªã khi ƒëƒÉng xu·∫•t / reset
  Future<void> resetDeviceId() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('cached_device_id');

    if (kIsWeb) {
      html.window.localStorage.remove('device_key');
    }
  }

  /// X·ª≠ l√Ω ƒëƒÉng nh·∫≠p th√†nh c√¥ng + Gi·ªõi h·∫°n 1 t√†i kho·∫£n / 1 thi·∫øt b·ªã
  Future<void> handleLoginSuccess(String email) async {
    final hashedDeviceId = await getHashedDeviceId();
    deviceId = hashedDeviceId;

    final uid = _auth.currentUser!.uid;
    final userDoc = _firestore.collection("userLogin").doc(uid);
    final snapshot = await userDoc.get();

    // üîç Ki·ªÉm tra xem deviceId n√†y ƒë√£ t·ªìn t·∫°i ·ªü t√†i kho·∫£n kh√°c ch∆∞a
    final existingDevice = await _firestore
        .collection("userLogin")
        .where("deviceIds", arrayContains: deviceId)
        .get();

    if (existingDevice.docs.isNotEmpty) {
      final otherUserId = existingDevice.docs.first.id;
      if (otherUserId != uid) {
        // ‚ùå Thi·∫øt b·ªã n√†y ƒë√£ ƒëƒÉng nh·∫≠p t√†i kho·∫£n kh√°c
        showSnackBAR(
            context,
            "Thi·∫øt b·ªã n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒëƒÉng nh·∫≠p t√†i kho·∫£n kh√°c. "
                "Vui l√≤ng ƒëƒÉng xu·∫•t t√†i kho·∫£n ƒë√≥ tr∆∞·ªõc khi ti·∫øp t·ª•c.");
        await _auth.signOut();
        return;
      }
    }

    // ‚úÖ Ki·ªÉm tra t√†i kho·∫£n n√†y c√≥ ƒëƒÉng nh·∫≠p tr√™n thi·∫øt b·ªã kh√°c kh√¥ng
    if (snapshot.exists) {
      final data = snapshot.data() ?? {};
      final List<dynamic> devices =
      (data['deviceIds'] is List) ? List.from(data['deviceIds']) : [];

      if (devices.isNotEmpty && !devices.contains(deviceId)) {
        showSnackBAR(context,
            "T√†i kho·∫£n n√†y ƒë√£ ƒëƒÉng nh·∫≠p tr√™n thi·∫øt b·ªã kh√°c.\nVui l√≤ng ƒëƒÉng xu·∫•t thi·∫øt b·ªã c≈© tr∆∞·ªõc.");
        await _auth.signOut();
        return;
      }

      // N·∫øu ch∆∞a c√≥ deviceId ho·∫∑c c√πng thi·∫øt b·ªã ‚Üí cho ph√©p login
      if (!devices.contains(deviceId)) {
        await userDoc.set({
          "deviceIds": FieldValue.arrayUnion([deviceId]),
        }, SetOptions(merge: true));
      }
    } else {
      // üî∞ User m·ªõi ‚Üí t·∫°o m·ªõi
      await userDoc.set({
        "email": emailController.text.trim(),
        "deviceIds": [deviceId],
        "createdAt": FieldValue.serverTimestamp(),
      });
    }
    // üëâ N·∫øu h·ª£p l·ªá th√¨ cho v√†o trang ch√≠nh
    showSnackBAR(context, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => MyPage()),
    );
  }

  void _login() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => isLoading = true);

    final result = await _authService.loginUser(
      email: emailController.text.trim(),
      password: passwordController.text.trim(),
    );

    setState(() => isLoading = false);

    if (result == "Th√†nh c√¥ng") {
      // ‚úÖ Chuy·ªÉn tr√°ch nhi·ªám ƒëi·ªÅu h∆∞·ªõng cho handleLoginSuccess
      await handleLoginSuccess(emailController.text.trim());
    } else {
      setState(() {
        isLoading = false;
      });
      // Th√¥ng b√°o ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("ƒêƒÉng nh·∫≠p $result"),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 2),
        ),
      );
    }
  }
    // void _login() async {
    // setState(() {
    //   isLoading = true;
    // });
    // final result = await _authService.loginUser(
    //   email: emailController.text,
    //   password: passwordController.text,
    // );
    // if ((result == "Th√†nh c√¥ng") & (_formKey.currentState!.validate())) {
    //   setState(() {
    //     isLoading = false;
    //   });
    //   await handleLoginSuccess(emailController.text);
    //   //showSnackBAR(context, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
    //   // Navigator.pushReplacement(
    //   //   context,
    //   //   MaterialPageRoute(builder: (context) => MyPage()),
    //   // );
    // } else {
    //   setState(() {
    //     isLoading = false;
    //   });
    //   // Th√¥ng b√°o ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
    //   ScaffoldMessenger.of(context).showSnackBar(
    //     SnackBar(
    //       content: Text("ƒêƒÉng nh·∫≠p $result"),
    //       duration: const Duration(seconds: 2),
    //       backgroundColor: Colors.red,
    //     ),
    //   );
    // }
   // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Padding(
          padding: EdgeInsets.all(16),
          child: SingleChildScrollView(
            child: Column(
              children: [
                Image.asset("img/logocand.png"),
                const SizedBox(height: 10),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      "PH√íNG THAM M∆ØU",
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Colors.red,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 70),
                //T·∫°o h√†ng ƒëƒÉng nh·∫≠p email
                Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      TextFormField(
                        controller: emailController,
                        decoration: InputDecoration(
                          labelText: "Email",
                          hintText: "abc@gmail",
                          border: OutlineInputBorder(),
                        ),
                        validator: (v) {
                          if (v == null || v.trim().isEmpty) {
                            return "Nh·∫≠p Email";
                          }
                          final emailRegex = RegExp(
                            r"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9]+\.[a-zA-Z]+",
                          );
                          if (!emailRegex.hasMatch(v.trim())) {
                            return "Email kh√¥ng h·ª£p l·ªá";
                          }
                          return null;
                        },
                      ),

                      //T·∫°o h√†ng ƒëƒÉng nh·∫≠p m·∫≠t kh·∫©u
                      const SizedBox(height: 30),
                      TextFormField(
                        controller: passwordController,
                        decoration: InputDecoration(
                          labelText: "M·∫≠t kh·∫©u",
                          hintText: "Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n",
                          border: OutlineInputBorder(),
                          suffixIcon: IconButton(
                            icon: Icon(
                              isPasswordHidden
                                  ? Icons.visibility_off
                                  : Icons.visibility,
                            ),
                            onPressed: () {
                              setState(() {
                                isPasswordHidden = !isPasswordHidden;
                              });
                            },
                          ),
                        ),
                        validator: (v) {
                          if (v == null || v.trim().isEmpty || v.length < 6) {
                            return "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng";
                          }
                          return null;
                        },
                        obscureText: isPasswordHidden,
                        obscuringCharacter: '*',
                      ),
                      //t·∫°o m·ªôt v√≤ng tr√≤n xoay loading
                      const SizedBox(height: 50),
                      isLoading
                          ? const Center(
                            child: CircularProgressIndicator(
                              color: Colors.blue,
                            ),
                          )
                          //T·∫°o n√∫t button ƒëƒÉng nh·∫≠p
                          : SizedBox(
                            width: double.infinity,
                            child: MyButton(
                              onTap: _login,
                              buttontext: "ƒêƒÉng nh·∫≠p",
                            ),
                          ),
                      SizedBox(height: 20),
                      const EmailForgotPasswordScreen(),
                      const SizedBox(height: 100),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            "B·∫°n ch∆∞a c√≥ t√†i kho·∫£n?",
                            style: TextStyle(fontSize: 18),
                          ),
                          GestureDetector(
                            child: Text(
                              " ƒêƒÉng k√Ω",
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Colors.red,
                                letterSpacing: -1,
                              ),
                            ),
                            onTap: () {
                              //x·ª≠ l√Ω khi click v√†o ch·ªØ ƒëƒÉng k√Ω, s·∫Ω ra form ƒëƒÉng k√Ω
                              Navigator.pushReplacement(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => EmailSignupScreen(),
                                ),
                              );
                            },
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
